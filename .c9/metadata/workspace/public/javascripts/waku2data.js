{"changed":true,"filter":false,"title":"waku2data.js","tooltip":"/public/javascripts/waku2data.js","value":"<!--\r\n\t/******************************************************************\r\n\t * セッションストレージ設定\r\n\t ******************************************************************/\r\n\tvar storage = localStorage;\r\n\tvar isAnimation = false;\r\n\r\n\r\n\t/******************************************************************\r\n\t * 定数\r\n\t ******************************************************************/\r\n\tvar kHandicap  = \"compe.handicap\";\r\n\tvar kHandyHole = \"compe.handiHole\";\r\n\tvar kRId       = \"compe.rid\";\r\n\tvar kRName     = \"compe.rname\";\r\n\tvar kCName     = \"compe.cname\";\r\n\tvar kCHoleInfs = \"compe.holeinfs\";\r\n\tvar kPlayers   = \"compe.players\";\r\n\tvar kScores    = \"compe.scores\";\r\n\tvar kTeams     = \"compe.teams\";\r\n\tvar kHandiMax  = \"compe.handiMax\";\r\n\r\n\tvar ns = [\"leadersboard\",\"live\"];\r\n\tvar ev = [\"connect\",\"uploadscore\",\"getroundinf\",\"score\",\"personalscore\",\"comment\"];\r\n\r\n\r\n\t/******************************************************************\r\n\t * 共通変数\r\n\t ******************************************************************/\r\n\tvar lb;\r\n\tvar live;\r\n\tvar roundData = null;\r\n\tvar clsAnimete = null;\r\n\tvar clsAnimete2 = null;\r\n\tvar scoreData;\r\n\tvar hHandys = null;\r\n\tvar hPars = [];\r\n\r\n\r\n\t/******************************************************************\r\n\t * ソート定義\r\n\t ******************************************************************/\r\n\tvar sort_ary = function( field, reverse, primer, subfield ){\r\n\t   reverse = (reverse) ? -1 : 1;\r\n\t   return function( a, b){\r\n\t       var a1 = a[field];\r\n\t       var b1 = b[field];\r\n\t       if (typeof(primer) != 'undefined'){\r\n\t           a1 = primer(a1);\r\n\t           b1 = primer(b1);\r\n\t       }\r\n\t       if (a1 < b1) return reverse * -1;\r\n\t       if (a1 > b1) return reverse * 1;\r\n\r\n           var a2 = a[subfield];\r\n           var b2 = b[subfield];\r\n\t       if (typeof(primer) != 'undefined'){\r\n\t           a2 = primer(a2);\r\n\t           b2 = primer(b2);\r\n\t       }\r\n\r\n\t       if (a2 < b2) return reverse * 1;\r\n\t       if (a2 > b2) return reverse * -1;\r\n\t       return 0;\r\n\t   }\r\n\t}\r\n\r\n\r\n/*\r\n\tvar sort_json = function( field, reverse, primer ){\r\n\t   reverse = (reverse) ? -1 : 1;\r\n\t   return function( a, b){\r\n\t       a = JSON.parse(a)[field];\r\n\t       b = JSON.parse(b)[field];\r\n\t       if (typeof(primer) != 'undefined'){\r\n\t           a = primer(a);\r\n\t           b = primer(b);\r\n\t       }\r\n\t       if (a < b) return reverse * -1;\r\n\t       if (a > b) return reverse * 1;\r\n\t       return 0;\r\n\t   }\r\n\t}\r\n*/\r\n\r\n\r\n\t/******************************************************************\r\n\t * 初期設定\r\n\t ******************************************************************/\r\n\tfunction initializeCommon()\r\n\t{\r\n\t\t// 杯名称を設定する\r\n\t\tdocument.getElementById('captitle').innerHTML  = storage.getItem(kRName);\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ストレージ初期化処理\r\n\t ******************************************************************/\r\n\tfunction initAll(pageuri)\r\n\t{\r\n\t\t// 初期化\r\n\t\tstorage.removeItem(kRName);\r\n\t\tstorage.removeItem(kRId);\r\n\t\tstorage.removeItem(kCName);\r\n\t\tstorage.removeItem(kCHoleInfs);\r\n\t\tstorage.removeItem(kHandicap);\r\n\t\tstorage.removeItem(kPlayers);\r\n\t\tstorage.removeItem(kScores);\r\n\t\tstorage.removeItem(kTeams);\r\n\t\tstorage.removeItem(kHandyHole);\r\n\t\tstorage.removeItem(kHandiMax);\r\n\r\n\t\t// 移行\r\n\t\tstorage.setItem(kRName,     storage.getItem(\"_\" + kRName));\r\n\t\tstorage.setItem(kRId,       storage.getItem(\"_\" + kRId));\r\n\t\tstorage.setItem(kCName,     storage.getItem(\"_\" + kCName));\r\n\t\tstorage.setItem(kCHoleInfs, storage.getItem(\"_\" + kCHoleInfs));\r\n\t\tstorage.setItem(kHandicap,  storage.getItem(\"_\" + kHandicap));\r\n\t\tstorage.setItem(kPlayers,   storage.getItem(\"_\" + kPlayers));\r\n\t\tstorage.setItem(kScores, storage.getItem(\"_\" + kScores));\r\n\t\tstorage.setItem(kTeams, storage.getItem(\"_\" + kTeams));\r\n\t\tstorage.setItem(kHandiMax, storage.getItem(\"_\" + kHandiMax));\r\n\r\n\t\t// 初期化2\r\n\t\tinitNext();\r\n\r\n    if (pageuri) {\r\n      window.location = \"_blank\";\r\n      window.location = pageuri;\r\n    }\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ストレージの初期化\r\n\t ******************************************************************/\r\n\tfunction initNext()\r\n\t{\r\n\t\tstorage.removeItem(\"_\" + kRName);\r\n\t\tstorage.removeItem(\"_\" + kRId);\r\n\t\tstorage.removeItem(\"_\" + kCName);\r\n\t\tstorage.removeItem(\"_\" + kCHoleInfs);\r\n\t\tstorage.removeItem(\"_\" + kHandicap);\r\n\t\tstorage.removeItem(\"_\" + kPlayers);\r\n\t\tstorage.removeItem(\"_\" + kScores);\r\n\t\tstorage.removeItem(\"_\" + kTeams);\r\n\t\tstorage.removeItem(\"_\" + kHandiMax);\r\n\t}\r\n\r\n\t/******************************************************************\r\n\t * ストレージの初期化\r\n\t ******************************************************************/\r\n\tfunction clearData()\r\n\t{\r\n\t\tstorage.clear();\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * コース情報取得処理（初回接続時）\r\n\t ******************************************************************/\r\n\tfunction connectTop(rid)\r\n\t{\r\n        // leadersboard接続\r\n\t\tio.transports.push('websocket');\r\n\t\tio.transports.push('xhr-polling'); \r\n\t\tio.transports.push('jsonp-polling');\r\n\t\tio.transports.push('flashsocket');\r\n\t\tio.transports.push('htmlfile');\r\n//\t\tlb = io.connect(\"https://wakuwaku.c.node-ninja.com/leadersboard\", {\r\n\t\tlb = io.connect(\"/leadersboard\", {\r\n\t\t\t'try multiple transports': true, \r\n\t\t\t'force new connection': true \r\n\t\t});\r\n\t\tconsole.log(\"leadersboard attempt connect...\");\r\n\r\n\t\t// 接続成功\r\n\t\tlb.on(ev[0], function() {\r\n\t\t\tconsole.log(\"connect success...\");\r\n\r\n\t\t\t// ラウンド情報取得\r\n\t\t\tlb.on(ev[2], function(round) {\r\n\t\t\t\tconsole.log(\"getroundinf access...\");\r\n\t\t\t\tgetRoundData([round]);\r\n\t\t\t\tgetPlayerData([round]);\r\n\r\n\t\t\t\tif (storage.getItem(\"_\" + kRId) != null\r\n\t\t\t\t\t&& storage.getItem(\"_\" + kRId) != \"\"\r\n\t\t\t\t\t&& storage.getItem(\"_\" + kRId) != \"undefined\")\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\t// スコア要求\r\n\t\t\t\t\trequestPersonalScore(lb, storage.getItem(\"_\" + kRId), 2);\r\n\r\n\t\t\t\t\tlb.on(ev[4], function(score) {\r\n\t\t\t\t\t\tgetScoreData(score);\r\n\t\t\t\t\t\tsetTeamScoreData();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// 接続失敗\r\n\t    lb.on('connect_failed', function(data){\r\n\t\t\tconsole.log(\"leadersboard connection faled \" + data);\r\n\t\t\talert(\"Connection Error!\" + data);\r\n\t\t\treturn;\r\n\t    });\r\n\r\n\t\t// ラウンド情報要求\r\n\t\trequestRoundInfo(lb, rid);\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ラウンド情報要求（初回接続時　サーバへの送信）\r\n\t ******************************************************************/\r\n\tfunction requestRoundInfo( lb, rid ) {\r\n\t\tlb.emit(ev[2], { 'rid' : rid });\r\n\t\tconsole.log(\"send request RoundInfo\");\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * スコア要求（初回接続時　サーバへの送信）\r\n\t ******************************************************************/\r\n\tfunction requestPersonalScore( lb, rid, type ) {\r\n\t\tlb.emit(ev[4], { \"rid\": rid, \"type\": type });\r\n\t\tconsole.log(\"send requestPersonalScore type:\" + type);\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ラウンド情報の取得（初回接続時）\r\n\t ******************************************************************/\r\n\tfunction getRoundData( roundData ) {\r\n\t\t// ラウンドID\r\n\t\tstorage.setItem(\"_\" + kRId, roundData[0].rid);\r\n\r\n\t\t// ラウンド名\r\n\t\tstorage.setItem(\"_\" + kRName, roundData[0].rname);\r\n\r\n\t\t// ハンディキャップ方式\r\n\t\tstorage.setItem(\"_\" + kHandicap, JSON.stringify(roundData[0].handicapinf));\r\n\r\n\t\t// コース名\r\n\t\tstorage.setItem(\"_\" + kCName, roundData[0].cinf.cname);\r\n\r\n\t\t// コース情報\r\n\t\tvar arraySubCourses = [];\r\n\t\tfor (var i = 0; i < roundData[0].cinf.holeinfs.length; i++)\r\n\t\t{\r\n\t\t\tarraySubCourses[i] = roundData[0].cinf.holeinfs[i];\r\n\t\t}\r\n\t\tstorage.setItem(\"_\" + kCHoleInfs, JSON.stringify(arraySubCourses));\r\n\r\n\t\t// ハンデ選択数\r\n\t\tvar h = 6;\r\n/*\t\tif (JSON.parse(storage.getItem(kHandicap)).method == 1) {\r\n\t\t\th = 4;\r\n\t\t} else if (JSON.parse(storage.getItem(kHandicap)).method == 2) {\r\n\t\t\th = 6;\r\n\t\t} else if (JSON.parse(storage.getItem(kHandicap)).method == 3) {\r\n\t\t\th = 8;\r\n\t\t}\r\n*/\r\n\t\tstorage.setItem(\"_\" + kHandiMax, h * JSON.parse(storage.getItem(\"_\" + kCHoleInfs)).length);\r\n\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * プレイヤー情報/チーム情報の取得（初回接続時）\r\n\t ******************************************************************/\r\n\tfunction getPlayerData( roundData ) {\r\n\t\tvar arrayPlayers = [];\r\n\t\tvar arrayTeams = [];\r\n\t\tvar k = 0;\r\n\t\tvar l = 0;\r\n\r\n\t\tvar plobj = new Array();\r\n\t\tfor (var i = 0; i < roundData[0].prtyinfs.length; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < roundData[0].prtyinfs[i].plyrifs.length; j++)\r\n\t\t\t{\r\n\t\t\t\t// プレイヤー情報\r\n\t\t\t\tplobj[k] = roundData[0].prtyinfs[i].plyrifs[j];\r\n\r\n\t\t\t\t// プレイヤーキー一覧\r\n\t\t\t\tarrayPlayers[k] = roundData[0].prtyinfs[i].plyrifs[j].plid;\r\n\t\t\t\tk++;\r\n\t\t\t\t\r\n\t\t\t\t// チームキー一覧\r\n\t\t\t\tif (arrayTeams.indexOf(roundData[0].prtyinfs[i].plyrifs[j].tid) == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tarrayTeams[l] = roundData[0].prtyinfs[i].plyrifs[j].tid;\r\n\t\t\t\t\tl++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstorage.setItem(\"_\" + kPlayers, JSON.stringify(plobj));\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * スコア情報取得処理（初回接続時）\r\n\t ******************************************************************/\r\n\tfunction getScoreData( scoreData )\r\n\t{\r\n\t\t// 各プレイヤースコア\r\n\t\tfor (var i = 0; i < scoreData.pscores.length; i++)\r\n\t\t{\r\n\t\t\tstorage.setItem(\"_\" + scoreData.pscores[i].plid + \".scr\", JSON.stringify(scoreData.pscores[i].score));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * スコア情報取得処理（初回接続時）\r\n\t ******************************************************************/\r\n\tfunction setTeamScoreData()\r\n\t{\r\n\t\tvar dataPlayerScores = new Array();\r\n\t\tvar dataTeamScores = new Array();\r\n\r\n\t\t// 各プレイヤー情報から値を加算していく\r\n\t\tvar plObj = JSON.parse(storage.getItem(\"_\" + kPlayers));\r\n\t\tfor (var i = 0; i < plObj.length; i++)\r\n\t\t{\r\n\t\t\tvar tid = plObj[i].tid;\r\n\t\t\tvar tname = plObj[i].team.tname;\r\n\t\t\tvar scr = JSON.parse(storage.getItem(\"_\" + plObj[i].plid + \".scr\"));\r\n\t\t\tif (scr == null) continue;\r\n\r\n\t\t\tvar plScr = new dataPlayerScore()\r\n\t\t\tplScr.dataId = plObj[i].plid;\r\n\t\t\tplScr.name = plObj[i].user.uname;\r\n\t\t\tplScr.hole_score = scr.holes;\r\n\t\t\tplScr.score_gross = scr.gross;\r\n\t\t\tplScr.score_net = scr.gross;\r\n\t\t\tplScr.teamId = tid;\r\n\t\t\tplScr.age = getCulculateAge(plObj[i].user.brthdy);\r\n\t\t\tdataPlayerScores.push(plScr);\r\n\r\n\t\t\t// 成績表示用のチーム情報に加算する\r\n\t\t\tvar flg = false;\r\n\t\t\tvar cnt = dataTeamScores.length;\r\n\t\t\tfor (var j = 0; j < cnt; j++)\r\n\t\t\t{\r\n\t\t\t\tif (dataTeamScores[j].dataId == tid)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 既にチームが登録されている\r\n\t\t\t\t\tdataTeamScores[j].score_gross += scr.gross;\r\n\t\t\t\t\tdataTeamScores[j].count += 1;\r\n\t\t\t\t\t// 年齢の加算\r\n\t\t\t\t\tdataTeamScores[j].age += getCulculateAge(plObj[i].user.brthdy);\r\n\t\t\t\t\tflg = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// チームが未登録\r\n\t\t\tif (!flg)\r\n\t\t\t{\r\n\t\t\t\tdataTeamScores[cnt] = new dataTeamScore();\r\n\t\t\t\tdataTeamScores[cnt].dataId = tid;\r\n\t\t\t\tdataTeamScores[cnt].name = tname;\r\n\t\t\t\tdataTeamScores[cnt].score_gross = scr.gross;\r\n\t\t\t\tdataTeamScores[cnt].count = 1;\r\n\t\t\t\tdataTeamScores[cnt].age = getCulculateAge(plObj[i].user.brthdy);\r\n\t\t\t}\r\n\r\n\t\t\t// 不要になったstorageを削除\r\n\t\t\tstorage.removeItem(\"_\" + plObj[i].plid + \".scr\");\r\n\t\t}\r\n\r\n\t\t// 全プレイヤーの集計が終わったので、スコアを人数割りする\r\n\t\tfor (var i = 0; i < dataTeamScores.length; i++)\r\n\t\t{\r\n\t\t\tdataTeamScores[i].score_gross = Math.round(dataTeamScores[i].score_gross * 10 / dataTeamScores[i].count) / 10;\r\n\t\t\tdataTeamScores[i].score_net = Math.round(dataTeamScores[i].score_gross * 10) /10;\r\n\t\t\tdataTeamScores[i].age = Math.round(dataTeamScores[i].age / dataTeamScores[i].count);\r\n\t\t}\r\n\r\n\t\tstorage.setItem(\"_\" + kScores, JSON.stringify(dataPlayerScores));\r\n\t\tstorage.setItem(\"_\" + kTeams, JSON.stringify(dataTeamScores));\r\n\t}\r\n\r\n\t/******************************************************************\r\n\t * チーム成績表：初期反映\r\n\t *   チーム成績表のDOMContentLoadedで呼び出される\r\n\t ******************************************************************/\r\n\tfunction initializePerformance()\r\n\t{\r\n\t\tif( clsAnimete == null ) {\r\n\t\t\tclsAnimete = new wk2AnimetionClass;\r\n\t\t}\r\n\r\n\t\t// 初期化共通処理呼出し\r\n\t\tinitializeCommon();\r\n\r\n\t\tvar countHandy = 0;\r\n\t\tvar handiMax = storage.getItem(kHandiMax);\r\n\r\n\t\t// ハンデ抽選状況の更新\r\n\t\tif (document.getElementById('drawHole') !=  null)\r\n\t\t{\r\n\t\t\tcountHandy = countSelectHandy();\r\n\t\t\tdocument.getElementById('drawHole').innerHTML  = countHandy + \" / \" + handiMax;\r\n\t\t}\r\n\r\n\t\t// チームデータを作成する\r\n\t\tvar teamData;\r\n\t\tvar isUpdate = false;\r\n\t\tvar animeType = \"none\";\r\n\r\n\t\tteamData = sortDisplayData(kTeams, \"score_net\", \"age\");\r\n\t\tclsAnimete.setSrcScore( teamData );\r\n\r\n\t\t// TODO\r\n/*\r\n\t\tif (storage.getItem(kHandyHole + \"0\") != null)\r\n\t\t{\r\n\t\t\tteamData = culcHandy();\r\n\t\t\tclsAnimete.setDstScore( teamData );\r\n\t\t\tisUpdate = true;\r\n\t\t\t// TODO ハンデホール決定数\r\n\t\t\tanimeType = \"update\";\r\n\t\t}\r\n*/\r\n\r\n\t\t// データをアニメーションクラスに設定し、初期表示を行う\r\n\t\tclsAnimete.CreateObjects();\r\n\t\tif (countHandy == handiMax) {\r\n\t\t\tclsAnimete.restoreData( false, \"yes\" );  // アニメーションなし\r\n\t\t\tclsAnimete.updaeData(\"finale\");\r\n\t\t} else {\r\n\t\t\tclsAnimete.restoreData( true );  // アニメーションあり\r\n\t\t}\r\n//\t\tif (isUpdate)\r\n//\t\t{\r\n//\t\t\tclsAnimete.updaeData(animeType);\r\n//\t\t}\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * 個人成績表：初期反映\r\n\t ******************************************************************/\r\n\tfunction initializePerformancePersonal()\r\n\t{\r\n\t\tvar hide = scoreHide\r\n\r\n\t\tif( clsAnimete2 == null ) {\r\n\t\t\tclsAnimete2 = new wk2AnimetionClass(\"parsonal\");\r\n\t\t}\r\n\t\t// 初期化共通\r\n\t\tinitializeCommon();\r\n\r\n\t\tif (document.getElementById('drawHole') !=  null)\r\n\t\t{\r\n\t\t\tdocument.getElementById('drawHole').innerHTML  = countSelectHandy() + \" / \" + storage.getItem(kHandiMax);\r\n\t\t}\r\n\r\n\t\t// データ反映\r\n\t\tvar dataPlayerScore = sortDisplayData(kScores, \"score_net\", \"age\");\r\n\r\n\t\t// データをアニメーションクラスに設定し、初期表示を行う\r\n\t\tclsAnimete2.setSrcScore( dataPlayerScore );\r\n\t\tclsAnimete2.CreateObjects();\r\n//\t\tclsAnimete2.restoreData( true );  // アニメーションあり\r\n\t\tclsAnimete2.restoreData( false, hide );  // アニメーションなし\r\n\t\tif (hide == \"yes\") {\r\n\t\t\tclsAnimete2.updaeData(\"finale\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * チームオブジェクトを初期化する\r\n\t ******************************************************************/\r\n\tfunction initializeObjects( divname, keyname )\r\n\t{\r\n\t\tvar obj = document.querySelectorAll( divname );\r\n\r\n\t\t// ノードを複製\r\n\t\t//   読み込み済みのデータ数分ノードを複製\r\n\t\t//   チームIDをオブジェクトIDとして設定\r\n\t\tvar array = storage.getItem(keyname).split(\",\");\r\n\r\n\t\tfor (var i = 0; i < array.length; i++) {\r\n\t\t\tif( i == 0 ) {\r\n\t\t\t\t// 先頭を雛型ノードとする\r\n\t\t\t\tobj[0].setAttribute( \"id\", array[i] );\r\n\t\t\t} else {\r\n\t\t\t\t// 雛型ノードを複製する\r\n\t\t\t\tvar copy = obj[0].cloneNode(true);\r\n\t\t\t\tcopy.setAttribute( \"id\", array[i] );\r\n\t\t\t\tobj[0].parentNode.appendChild(copy);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * チームデータを作成する\r\n\t ******************************************************************/\r\n\tfunction sortDisplayData( dataname, keyname, subkeyname )\r\n\t{\r\n\t\tvar obj;\r\n\t\tvar scores = JSON.parse(storage.getItem(dataname));\r\n\r\n\t\t// netスコア順にソート\r\n\t\tvar array = new Array();\r\n\t\tfor (var i = 0;i < scores.length; i++) {\r\n\t\t\tarray.push(scores[i]);\r\n\t\t}\r\n\r\n\t\tarray.sort(sort_ary(keyname, false, parseFloat, subkeyname));\r\n\r\n\t\tfor (var i = 0; i < array.length; i++)\r\n\t\t{\r\n\t\t\tarray[i].ranking = i + 1;\r\n\t\t}\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ハンディキャップ計算\r\n\t ******************************************************************/\r\n\tfunction culcHandy()\r\n\t{\r\n\t\t// ハンデホールのパー数取得\r\n\t\tvar arrays = getHandiPars();\r\n\r\n\t\t// 各人のハンデ計算\r\n\t\tvar dataPlayerScores = culcHandyPerson(arrays);\r\n\r\n\t\t// 各グループの集計（＆人数で割る）\r\n\t\treturn culcHandyTeams(dataPlayerScores);\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ハンデホールのパー数を取得\r\n\t ******************************************************************/\r\n\tfunction getHandiPars()\r\n\t{\r\n\t\tvar handiPars = new Array();\r\n\t\tvar pars = new Object();\r\n\r\n\t\tvar handyArray = JSON.parse(storage.getItem(kHandyHole));\r\n\t\tvar holeArray = JSON.parse(storage.getItem(kCHoleInfs));\r\n\r\n\t\t// サブごとのオブジェクト配列\r\n\t\tfor (var ix in handyArray)\r\n\t\t{\r\n\t\t\tvar h = handyArray[ix];\r\n\t\t\tif (h == null || h.pars.length < 9)\tcontinue;\r\n\r\n\t\t\tfor (var hix in holeArray)\r\n\t\t\t{\r\n\t\t\t\tpars = holeArray[hix];\r\n\t\t\t\tif (h.csubid != pars.csubid) continue;\r\n\r\n\t\t\t\tvar arrays = new Array();\r\n\t\t\t\tfor (var k = 0; k < h.pars.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (h.pars[k] == \"\") {\r\n\t\t\t\t\t\tarrays[k] = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tarrays[k] = pars.pars[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar obj = new Object();\r\n\t\t\t\tobj.csubid = h.csubid;\r\n\t\t\t\tobj.hole_score = arrays;\r\n\t\t\t\thandiPars.push(obj);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn handiPars;\r\n\t}\r\n\r\n/*\r\n\r\n\t\thHandys = storage.getItem(kHandyHole).split(\",\");\r\n\t\tvar holes = storage.getItem(kCHoleInfs).split(\",\");\r\n\t\tfor (var i = 0; i < hHandys.length; i++)\r\n\t\t{\r\n\t\t\tvar h = JSON.parse(hHandys[i]);\r\n\t\t\tif (h == null || h.pars.length < 9)\tcontinue;\r\n\r\n\t\t\tfor (var j = 0; j < holes.length; j++)\r\n\t\t\t{\r\n\t\t\t\tpars = JSON.parse(holes[j]);\r\n\t\t\t\tif (h.csubid != pars.csubid) continue;\r\n\r\n\t\t\t\tfor (var k = 0; k < h.pars.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (h.pars[k] == \"\") {\r\n\t\t\t\t\t\tarrays[k] = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tarrays[k] = pars.pars[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar obj = new Object();\r\n\t\t\t\tobj.csubid = h.csubid;\r\n\t\t\t\tobj.hole_score = arrays;\r\n\t\t\t\thandiPars.push(obj);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn handiPars;\r\n\r\n\tfunction getHandyPars()\r\n\t{\r\n\t\tvar arrays = new Array();\r\n\r\n\t\tfor (var i = 0; i < storage.getItem(kSubCArray).split(\",\").length; i++)\r\n\t\t{\r\n\t\t\tif (storage.getItem(kHandyHole + i) == null)\r\n\t\t\t{\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\t// TODO サブごとのオブジェクト配列に！\r\n\t\t\thHandys = storage.getItem(kHandyHole + i).split(\",\");\r\n\r\n\t\t\tvar h = JSON.parse(storage.getItem(kCHoleInfs + i));\r\n\t\t\tif (h == null || h.pars.length < 9)\treturn;\r\n\t\t\thPars = h.pars;\r\n\r\n\t\t\t// ハンデホールのパー数を取得し、配列に格納する\r\n\t\t\t// TODO 不要？\r\n\r\n\t\t\tfor (var j = 0; j < hHandys.length; j++)\r\n\t\t\t{\r\n\t\t\t\t// TODO hPars1 → hPars2 の順であることを信頼\r\n\t\t\t\tif (hHandys[j] == \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tarrays[j + i * 9] = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tarrays[j + i * 9] = h.pars[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn arrays;\r\n\t}\r\n*/\r\n\r\n\r\n\t/******************************************************************\r\n\t * 各人のハンディキャップ計算\r\n\t *   arrays : ハンデホールのパー値（ハンデホール以外はゼロ）\r\n\t ******************************************************************/\r\n\tfunction culcHandyPerson( arrays )\r\n\t{\r\n\r\n\t\tvar plObj = JSON.parse(storage.getItem(kScores));\r\n\t\tvar dataPlayerScores = new Array();\r\n\t\tvar k = 0;\r\n\t\tvar handiScoreMax = JSON.parse(storage.getItem(kHandicap)).upperLimit;\r\n\r\n\t\tfor (var i = 0; i < plObj.length; i++)\r\n\t\t{\r\n\t\t\tvar net = 0;\r\n\t\t\tfor (var x = 0; x < arrays.length; x++)\r\n\t\t\t{\r\n\t\t\t\tfor (var j = 0; j < plObj[i].hole_score.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (plObj[i].hole_score[j].csubid != arrays[x].csubid) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (var k = 0; k < arrays[x].hole_score.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (arrays[x].hole_score[k] != 0) {\r\n\t\t\t\t\t\t\t// TODO マイナスハンデがないなら、コメントをはずす\r\n\t\t\t\t\t\t\t//if (plObj[i].score.hole[j].scores[k] > arrays[x].hole_score[k])\r\n\t\t\t\t\t\t\tnet += plObj[i].hole_score[j].scores[k] - arrays[x].hole_score[k];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnet = net * 1.2;\r\n\t\t\tif (net > handiScoreMax) net = handiScoreMax;\r\n\t\t\tplObj[i].score_net = plObj[i].score_gross - net;\r\n\t\t}\r\n\r\n/*\t\tfor (var i = 0; i < plObj.length; i++)\r\n\t\t{\r\n\t\t\tvar net = 0;\r\n\t\t\tfor (var j = 0; j < plObj[i].hole_score.length; j++)\r\n\t\t\t{\r\n\t\t\t\tvar holes = JSON.parse(plObj[i].hole_score[j]);\r\n\r\n\t\t\t\t// TODO 18この同一連番Holeであることを信頼\r\n\t\t\t\tif (arrays.length > j && arrays[j] != 0) {\r\n\t\t\t\t\t// TODO マイナスハンデがないなら、コメントをはずす\r\n\t\t\t\t\t//if (plObj[i].hole_score[j] > arrays[j])\r\n\t\t\t\t\tnet += plObj[i].hole_score[j] - arrays[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnet = net * 1.2;\r\n\t\t\tif (net > handiScoreMax) net = handiScoreMax;\r\n\t\t\tplObj[i].score_net = plObj[i].score_gross - net;\r\n\t\t}\r\n*/\r\n\r\n\t\t// ソートし、順位付け\r\n\t\tplObj.sort(sort_ary(\"score_net\", false, parseFloat, \"age\"));\r\n\r\n\t\tfor (var i = 0; i < plObj.length; i++)\r\n\t\t{\r\n\t\t\tplObj[i].ranking = i + 1;\r\n\t\t\tplObj[i].score_net = Math.round(plObj[i].score_net * 10) /10;\r\n\t\t}\r\n\r\n\t\tstorage.setItem(kScores, JSON.stringify(plObj));\r\n\t\treturn plObj;\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * 各チームのハンディキャップ計算\r\n\t ******************************************************************/\r\n\tfunction culcHandyTeams( plObj )\r\n\t{\r\n\t\t// チーム情報の score_net を初期化\r\n\t\tvar teams = JSON.parse(storage.getItem(kTeams));\r\n\t\tfor (var i = 0; i < teams.length; i++)\r\n\t\t{\r\n\t\t\tteams[i].score_net = 0;\r\n\t\t}\r\n\r\n\t\t// チーム情報の score_net にプレイヤーの score_netを加算していく\r\n\t\tfor (var i = 0; i < plObj.length; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < teams.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif (teams[j].dataId == plObj[i].teamId)\r\n\t\t\t\t{\r\n\t\t\t\t\tteams[j].score_net += plObj[i].score_net;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// ソートし、順位付け\r\n\t\tteams.sort(sort_ary(\"score_net\", false, parseFloat, \"age\"));\r\n\t\tfor (var i = 0; i < teams.length; i++)\r\n\t\t{\r\n\t\t\tteams[i].ranking = i + 1;\r\n\t\t\tteams[i].score_net = Math.round(teams[i].score_net / teams[i].count * 10) / 10;\r\n\t\t}\r\n\r\n\t\t// 保存（更新）\r\n\t\tstorage.setItem(kTeams, JSON.stringify(teams));\r\n\t\treturn teams;\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ハンデ選択したホールを記憶する\r\n\t *  TODO:抽選結果により選択できなくなったホールにも情報をセットすること\r\n\t ******************************************************************/\r\n\tfunction setHandy(holeNumbers)\r\n\t{\r\n\t\tvar handis = holeNumbers;\r\n\t\tvar arrayHandyHole = getHandyData();\r\n\t\tvar array = new Array();\r\n\r\n\t\tfor (var i = 0; i < arrayHandyHole.length; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < handis.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif (arrayHandyHole[i].csubid != holeNumbers[j].csubid) continue;\r\n\r\n\t\t\t\tvar wkArray = new Array();\r\n\t\t\t\tfor (var k = 0; k < 9; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\twkArray[k] = arrayHandyHole[i].pars[k];\r\n\t\t\t\t}\r\n/*\r\n\t\t\t\tvar wkHole = handis[j].pars;\r\n\t\t\t\tfor (var l = 0; l < wkHole.length; l++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (wkHole[l] >= 0 && wkHole[l] <= 9 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twkArray[wkHole - 1] = \"○\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n*/\r\n\t\t\t\tfor (var l = 0; l < handis[j].selected.length; l++) \r\n\t\t\t\t{\r\n\t\t\t\t\twkArray[handis[j].selected[l] - 1] = \"○\";\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tvar a = new Object();\r\n\t\t\t\ta.csubid = arrayHandyHole[i].csubid;\r\n\t\t\t\ta.csubname = arrayHandyHole[i].csubname;\r\n\t\t\t\ta.name = arrayHandyHole[i].names;\r\n\t\t\t\ta.pars = wkArray;\r\n\t\t\t\tarray.push(a);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstorage.setItem(kHandyHole, JSON.stringify(array));\r\n\r\n/*\t\tfor (var i = 0; i < storage.getItem(kSubCArray).split(\",\").length; i++)\r\n\t\t{\r\n\t\t\tvar wkArray = new Array();\r\n\t\t\tfor (var k = 0; k < 9; k++)\r\n\t\t\t{\r\n\t\t\t\twkArray[k] = arrayHandyHole[k+i*9];\r\n\t\t\t}\r\n\r\n\t\t\tfor (var j = 0; j < handys.length; j++)\r\n\t\t\t{\r\n\t\t\t\tvar wkHole = handys[j] - (i*9);\r\n\t\t\t\tif (wkHole >= 0 && wkHole <= 9 )\r\n\t\t\t\t{\r\n\t\t\t\t\twkArray[wkHole - 1] = \"○\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstorage.setItem(kHandyHole + i, wkArray);\r\n\t\t}\r\n*/\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * 抽選済みのホール数をカウント\r\n\t ******************************************************************/\r\n\tfunction countSelectHandy()\r\n\t{\r\n\t\tvar count = 0;\r\n\r\n\t\tvar arrayHoles = getHandyData();\r\n\t\tfor (var ix in  arrayHoles)\r\n\t\t{\r\n\t\t\tvar holes = arrayHoles[ix];\r\n\t\t\tif (holes == null) continue;\r\n\r\n\t\t\tfor (var j = 0; j < holes.pars.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif (holes.pars[j] != \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n/*\t\tvar arrayHoleInfs = storage.getItem(kCHoleInfs).split(\",\");\r\n\t\tfor (var i = 0; i < arrayHoleInfs.length; i++)\r\n\t\t{\r\n\t\t\tvar holes = JSON.parse(arrayHoleInfs[i]);\r\n\t\t\tif (holes == null) continue;\r\n\r\n\t\t\tfor (var j = 0; j < holes.pars.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif (holes.pars[j] != \"\" && holes.pars[j] != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn count;\r\n*/\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * パーデータ配列を通知する\r\n\t ******************************************************************/\r\n\tfunction getParData()\r\n\t{\r\n\t\tvar parArray = new Array();\r\n\t\tvar arrayHoleInfs = JSON.parse(storage.getItem(kCHoleInfs));\r\n\r\n\t\tfor (var i in arrayHoleInfs)\r\n\t\t{\r\n\t\t\tvar js_h = new Object();\r\n\t\t\tjs_h.pars = arrayHoleInfs[i].pars;\r\n\t\t\tjs_h.csubid = arrayHoleInfs[i].csubid;\r\n\t\t\tparArray = parArray.concat(js_h);\r\n\t\t}\r\n\t\treturn parArray;\r\n\r\n/*\r\n\t\tvar parArray = new Array();\r\n\r\n\t\t//hHandys = [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\r\n\r\n\t\tvar arrayHoleInfs = storage.getItem(kCHoleInfs).split(\",\");\r\n\t\tfor (var i = 0; i < arrayHoleInfs.length; i++)\r\n\t\t{\r\n\t\t\tvar js_h = new Object();\r\n\t\t\tjs_h.pars = JSON.parse(arrayHoleInfs[i]).pars;\r\n\t\t\tjs_h.csubid = JSON.parse(arrayHoleInfs[i]).csubid;\r\n\t\t\tparArray = parArray.concat(js_h);\r\n\r\n\t\t\t//if (storage.getItem(kHandyHole + i) != null)\r\n\t\t\t//{\r\n\t\t\t//\thHandys = storage.getItem(kHandyHole + i).split(\",\");\r\n\t\t\t//}\r\n\t\t}\r\n\t\treturn parArray;\r\n*/\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * ハンデ選択されたホールを取得する\r\n\t ******************************************************************/\r\n\tfunction getHandyData()\r\n\t{\r\n\t\tvar arrayHandiHole = [];\r\n\t\tvar defaultValue = [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\r\n\t\tvar hData = JSON.parse(storage.getItem(kHandyHole));\r\n\t\t\r\n\t\tvar arrayHoleInfs = JSON.parse(storage.getItem(kCHoleInfs));\r\n\t\tfor (var i = 0; i < arrayHoleInfs.length; i++)\r\n\t\t{\r\n\t\t\tvar wkData = new Object();\r\n\t\t\twkData.csubid = arrayHoleInfs[i].csubid;\r\n\t\t\twkData.csubname = arrayHoleInfs[i].csubname;\r\n\t\t\twkData.names = arrayHoleInfs[i].names;\r\n\t\t\tif (hData == null || hData == undefined || hData.length <= i) {\r\n\t\t\t\twkData.pars = defaultValue;\r\n\t\t\t} else if( hData[i] == null || hData[i] == undefined || hData[i].csubid != arrayHoleInfs[i].csubid) {\r\n\t\t\t\twkData.pars = defaultValue;\r\n\t\t\t} else {\r\n\t\t\t\twkData.pars = hData[i].pars;\r\n\t\t\t}\r\n\t\t\tarrayHandiHole.push( wkData );\r\n\t\t}\r\n\r\n\t\treturn arrayHandiHole;\r\n\r\n/*\t\tvar arrayHandyHole = new Array();\r\n\t\tvar arrayDefaultValue = [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\r\n\t\tfor (var i = 0; i < storage.getItem(kSubCArray).split(\",\").length; i++)\r\n\t\t{\r\n\t\t\tvar wkData = new Array();\r\n\t\t\twkData = storage.getItem(kHandyHole + i);\r\n\t\t\tif( wkData == null || wkData == undefined) {\r\n\t\t\t\twkData = arrayDefaultValue;\r\n\t\t\t} else {\r\n\t\t\t\twkData = wkData.split(\",\");\r\n\t\t\t}\r\n\t\t\tarrayHandyHole = arrayHandyHole.concat( wkData );\r\n\t\t}\r\n\t\treturn arrayHandyHole;\r\n*/\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * チーム成績表：更新  @iwa\r\n\t *   ルーレットを閉じた後に呼び出される\r\n\t ******************************************************************/\r\n\tfunction updatePerformance()\r\n\t{\r\n\t\tvar countHandy = 0;\r\n\t\tvar handiMax = storage.getItem(kHandiMax);\r\n\r\n\t\t// ハンデ抽選状況の更新\r\n\t\tif (document.getElementById('drawHole') !=  null)\r\n\t\t{\r\n\t\t\tcountHandy = countSelectHandy();\r\n\t\t\tdocument.getElementById('drawHole').innerHTML  = countHandy + \" / \" + handiMax;\r\n\t\t}\r\n\r\n\t\t// チームデータを作成してソートする\r\n\t\tvar teamData;\r\n\t\tteamData = culcHandy();\r\n\t\tteamData = sortDisplayData(kTeams, \"score_net\", \"age\");\r\n\r\n\t\t// データを設定して表示を更新\r\n\t\tclsAnimete.setDstScore( teamData );\r\n\t\tanimeType = countHandy == handiMax ? \"finale\" : \"update\";\r\n\t\tclsAnimete.updaeData(animeType);\r\n\t}\r\n\r\n\r\n\t/******************************************************************\r\n\t * 年齢（経過日数）取得\r\n\t *   yyyy-MM-ddThh:mm:ss.sssZから現在年齢（経過日数）を求める\r\n\t ******************************************************************/\r\n\tfunction getCulculateAge(birthday)\r\n\t{\r\n\t\t// yyyy-MM-ddのみ取得\r\n\t\tvar birth = birthday.substr(0,10).split('-');\r\n\t\tvar _birth = new Date(parseInt(birth[0]), parseInt(birth[1]-1),  parseInt(birth[2]));\r\n\t\tvar today = new Date();\r\n\r\n\t\treturn (Math.floor( (today.getTime() - _birth.getTime()) / (1000 * 60 * 60 * 24)) + 1);\r\n\t}\r\n\r\n\tfunction getArrayHoleInfs() \r\n\t{\r\n\t\treturn JSON.parse(storage.getItem(kCHoleInfs));\r\n\t}\r\n\r\n\t/******************************************************************\r\n\t * 変換\r\n   *  src[\"3\",\"5\",\"o\",....] を \"o\" の部分だけの 番号（左記なら3）の\r\n   * 配列に変換する\r\n\t ******************************************************************/\r\n\tfunction convertFromO(src)\r\n\t{\r\n\t\tvar dst = [];\r\n\t\tfor (var i = 0; i < src.length; i++) {\r\n\t\t\tif (src[i] == \"○\") {\r\n\t\t\t\tdst.push(i+1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dst;\r\n\t}\r\n\r\n\t/******************************************************************\r\n\t * 上の反対\r\n\t ******************************************************************/\r\n\tfunction convertToO(src, dst)\r\n\t{\r\n\t\tvar dst2 = dst;\r\n\t\tfor (var i = 0; i < src.length; i++) {\r\n\t\t\tdst2[src[i]] = \"○\";\r\n\t\t}\r\n\t\treturn dst2;\r\n\t}\r\n\r\n\r\n\r\n// -->\r\n","undoManager":{"mark":-1,"position":4,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":0},"end":{"row":170,"column":1}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":170,"column":1},"end":{"row":170,"column":2}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":171,"column":1},"end":{"row":171,"column":2}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":171,"column":0},"end":{"row":171,"column":1}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":171,"column":19},"end":{"row":171,"column":36}},"text":"https://localhost"}]}]]},"ace":{"folds":[],"scrolltop":2414.5,"scrollleft":0,"selection":{"start":{"row":165,"column":0},"end":{"row":166,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":532,"state":"doc-start","mode":"ace/mode/javascript"}},"timestamp":1409321809000}